Mappings: 
  RegionMap: 
    us-west-2: 
      HVM64: "ami-098e42ae54c764c35"


Parameters:

  InstanceType:
    Description: Amazon EC2 instance type for the instances
    Type: String
    AllowedValues:
      - t3.micro
      - t2.micro
      - t2.medium
    Default: t2.medium

  EC2TagKey0:
    Type: String
    Default: Name
    
    
  EC2TagValue0:
    Type: String
    Default: nginx-server
    
    
  EC2TagKey1:
    Type: String
    Default: Type
    
    
  EC2TagValue1:
    Type: String
    Default: Dev
   
  RepoName:
    Description: The name of your codecommit repo
    Type: String
    
  BranchName:
    Description: The branch that you want the s3 bucket to push code to it
    Type: String
    
  CodeDeployServiceRole:
     Description: The codedeploy role that enable the service to call other services on your behalf
     Type: String
    
  DeploymentGroupName:
     Description: Deployment Group Name 
     Type: String
     
  S3ArtifactStoreName:
      Description: the artifact bucket that will be used by aws codepipeline to store the artifacts
      Type: String
      
  S3BucketName:
     Description: The Name of the s3 bucket that codecommit will pull the code from
     Type: String
     
  S3BucketKey:
     Description: The name of application 
     Type: String
      
  HostedZoneId:
     Description: The HostedZoneId
     Type: AWS::Route53::HostedZone::Id
     
  SSLARN:
      Description: The ssl arn of your domain
      Type: String
     
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    
  Route53RecordName:
    Description: the record name of the elb alias
    Type: String
     
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
    
#Conditions:
#  Publish: !Equals
#    - !Ref PublishToTopic
#    - True
#  CreateSubscription: !And
#    - !Condition Publish
#    - !Not
#      - !Equals
#        - !Ref NotificationEmail
#        - ''

Resources:
    # keypair
    KeyPair:
      Type: AWS::EC2::KeyPair
      Properties: 
        KeyName: ec2-keypair
        KeyType: rsa
        Tags: 
          - Key: Name
            Value: ec2-keypair
    # vpc 
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName
  
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName
  
    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC
        
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: !Ref PublicSubnet2CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs  '' ]
        CidrBlock: !Ref PrivateSubnet1CIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
  
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: !Ref PrivateSubnet2CIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
            
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
  
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1
  
    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2
  
    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Private Routes (AZ1)
    # ebs volume
    EbsVolume:
      Type: AWS::EC2::Volume
      Properties: 
        AvailabilityZone: !GetAtt
                          - PublicSubnet1
                          - AvailabilityZone
        Size: 20
        Tags: 
          - Key: Name
            Value: Ebs-volume
        VolumeType: gp2

    # ec2 instance
    Ec2Instance1: 
      Type: AWS::EC2::Instance
      Properties: 
        ImageId: !FindInMap
                 - RegionMap
                 - !Ref 'AWS::Region'
                 - HVM64
        InstanceType: !Ref InstanceType
        IamInstanceProfile: !Ref EC2InstanceProfile
        AvailabilityZone: !GetAtt
                          - PublicSubnet1
                          - AvailabilityZone
        SubnetId: !Ref PublicSubnet1
        Tags:
           - Key: !Ref EC2TagKey0
             Value: !Ref EC2TagValue0
             
           - Key: !Ref EC2TagKey1
             Value: !Ref EC2TagValue1
             
        BlockDeviceMappings: 
          - DeviceName: "/dev/sdh"
            Ebs: 
              VolumeType: "io1"
              Iops: "200"
              DeleteOnTermination: "false"
              VolumeSize: "20"
        SecurityGroupIds:
             - !GetAtt
               - Ec2SSecurityGroup
               - GroupId
      
        UserData:
            Fn::Base64: !Sub |
                #!/bin/bash
                sudo amazon-linux-extras install nginx1 -y
                sudo service nginx start
                sudo yum install ruby -y
                sudo yum install wget -y
                cd /home/ec2-user
                sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
                sudo chmod +x ./install
                sudo ./install auto
        KeyName: !Ref KeyPair
    
    Ec2Instance2: 
      Type: AWS::EC2::Instance
      Properties: 
        ImageId: !FindInMap
                 - RegionMap
                 - !Ref 'AWS::Region'
                 - HVM64
        InstanceType: !Ref InstanceType
        IamInstanceProfile: !Ref EC2InstanceProfile
        AvailabilityZone: !GetAtt
                          - PublicSubnet1
                          - AvailabilityZone
        SubnetId: !Ref PublicSubnet1
        Tags:
           - Key: !Ref EC2TagKey0
             Value: !Ref EC2TagValue0
             
           - Key: !Ref EC2TagKey1
             Value: !Ref EC2TagValue1
             
        BlockDeviceMappings: 
          - DeviceName: "/dev/sdh"
            Ebs: 
              VolumeType: "io1"
              Iops: "200"
              DeleteOnTermination: "false"
              VolumeSize: "20"
        SecurityGroupIds:
             - !GetAtt
               - Ec2SSecurityGroup
               - GroupId
        UserData:
            Fn::Base64: !Sub |
                #!/bin/bash
                sudo amazon-linux-extras install nginx1 -y
                sudo service nginx start
                sudo yum install ruby -y
                sudo yum install wget -y
                cd /home/ec2-user
                sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
                sudo chmod +x ./install
                sudo ./install auto
        KeyName: !Ref KeyPair
     # ec2 security group
    
    Ec2SSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Security group for ec2 allow ssh and http
        GroupName: ec2-cloudformation-sg
        SecurityGroupEgress: 
            - IpProtocol: "-1"
              CidrIp: 0.0.0.0/0
        SecurityGroupIngress: 
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !GetAtt 
                  - LoadBalancerSg
                  - GroupId
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        Tags: 
          - Key: Name
            Value: Ec2SSecurityGroup
        VpcId: !Ref VPC


    # elb sg
    LoadBalancerSg:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to client host
        Tags:
           - Key: Name
             Value: cloudformation-sg
        VpcId: !Ref VPC
        SecurityGroupIngress:
  
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
  
        SecurityGroupEgress:
          - IpProtocol: "-1"
            CidrIp: 0.0.0.0/0
            
    # elb 
    
    LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties: 
        
        Name: clouformation-loadbalancer
        Scheme: internet-facing
        SecurityGroups: 
          - !Ref LoadBalancerSg
        Subnets: 
           - !Ref PublicSubnet1
           - !Ref PublicSubnet2
        Tags: 
          - Key: Name
            Value: cloudformation-loadbalancer
        Type: application
    
    # target group
    
    TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties: 
        HealthCheckPath: /
        HealthCheckPort: 80
        HealthCheckProtocol: HTTP
        Targets:
            - Id: !Ref Ec2Instance1
              Port: 80
            - Id: !Ref Ec2Instance2
              Port: 80

        Name: cloudformation-targetgroup
        Port: 80
        Protocol: HTTP
        Tags: 
          - Key: Name
            Value: cloudformation-targetgroup
        VpcId: !Ref VPC
        
    # elb listener
    Listener:
      Type: 'AWS::ElasticLoadBalancingV2::Listener'
      Properties:
        DefaultActions:
          - Type: "redirect"
            RedirectConfig:
             Protocol: "HTTPS"
             Port: 443
             Host: "#{host}"
             Path: "/#{path}"
             Query: "#{query}"
             StatusCode: "HTTP_301"
            
        LoadBalancerArn: !Ref LoadBalancer
        Port: '80'
        Protocol: HTTP
        
    # elb listener
    ListenerHttps:
      Type: 'AWS::ElasticLoadBalancingV2::Listener'
      Properties:
        Certificates:
         - CertificateArn: !Ref SSLARN
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref TargetGroup
        LoadBalancerArn: !Ref LoadBalancer
        Port: 443
        Protocol: HTTPS
    
    # ssl
    LoadBalancerSSL:
      Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
      Properties: 
        Certificates: 
          - CertificateArn: !Ref SSLARN
        ListenerArn: !Ref ListenerHttps

      
    # route53 record
    ELBRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref HostedZoneId
        Comment: Zone apex alias targeted to myELB LoadBalancer
        RecordSets:
        - Name: !Ref Route53RecordName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt
                          - LoadBalancer
                          - CanonicalHostedZoneID
            DNSName: !GetAtt
                      - LoadBalancer
                      - DNSName

    # s3 bucket
    S3ArtifactStore:
      Type: 'AWS::S3::Bucket'
      Properties: 
        Tags:
          - Key: Name
            Value: !Ref S3ArtifactStoreName
     
    LambdaUsedToCleanUp:
      Type: Custom::cleanupbucket
      Properties:
        ServiceToken: !ImportValue EmptyS3BucketLambda
        BucketName: !Ref S3ArtifactStore
    # sns topic
    SnsTopic:
      Type: AWS::SNS::Topic
      Properties: {}
      
    # sns subscription
    #EmailNotification:
    #  Condition: CreateSubscription
    #  Type: AWS::SNS::Subscription
    #  Properties:
    #    Endpoint: !Ref NotificationEmail
    #    Protocol: email
    #    TopicArn: !Ref SnsTopic
      
    
    
    # cloudwatch alarm
    CpuUtilizationAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        Namespace: AWS/EC2
        MetricName: CPUUtilization
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 3
        Threshold: 80
        ComparisonOperator: GreaterThanThreshold

    #codecommit repo
    MyRepo:
      Type: AWS::CodeCommit::Repository
      Properties:
        RepositoryName: !Ref RepoName
        RepositoryDescription: This is a repository for my project with code from MySourceCodeBucket.
        Tags:
           - Key: Name
             Value: !Ref RepoName
        Code:
          BranchName: !Ref BranchName
          S3: 
            Bucket: !Ref S3BucketName
            Key:  !Ref S3BucketKey
    
    # codebuild project
    CodeBuildProject:
      Type: AWS::CodeBuild::Project
      Properties: 
        Artifacts: 
            #Location: !Ref S3codebuildArtifact
            #Name: MyArtifact
            #NamespaceType: BUILD_ID
            #Packaging: ZIP
            #Path: MyArtifact
            #Type: S3
            Type: CODEPIPELINE
        Environment: 
            ComputeType: BUILD_GENERAL1_MEDIUM
            EnvironmentVariables: 
              - Name: firstname
                Type: PLAINTEXT
                Value: abdelalijadelmoula
            Image: aws/codebuild/standard:5.0
            PrivilegedMode: True
            Type: LINUX_CONTAINER
        Name: cloudformation-build-project
        ServiceRole: !GetAtt
                     - CodeBuildServiceRole
                     - Arn
        Source: 
            #Location: !GetAtt
             #         - MyRepo
            #          - CloneUrlHttp
            #Type: CODECOMMIT
            Type: CODEPIPELINE
        Tags: 
          - Key: Name
            Value: aws-cloudformation-codebuild
       
    # codedeploy application
    
    CodeDeployApplication: 
      Type: AWS::CodeDeploy::Application 
      Properties:
        ComputePlatform: Server
      
    # codedeploy config
    CodeDeployConfig:
      Type: AWS::CodeDeploy::DeploymentConfig
      Properties: 
        ComputePlatform: Server
        DeploymentConfigName: cloudformationcodedeployconfig
        MinimumHealthyHosts: 
           Type: HOST_COUNT
           Value: 1

    AppDeploymentGroup:
        Type: AWS::CodeDeploy::DeploymentGroup
        Properties:
          AlarmConfiguration: 
            Alarms: 
              - Name: !Ref CpuUtilizationAlarm
            Enabled: True
            IgnorePollAlarmFailure: false
          ApplicationName: !Ref CodeDeployApplication
          ServiceRoleArn: !Ref CodeDeployServiceRole    
          DeploymentGroupName: !Ref DeploymentGroupName
          DeploymentConfigName: !Ref CodeDeployConfig
          Ec2TagFilters:
            - Key: !Ref EC2TagKey0
              Value: !Ref EC2TagValue0
              Type: KEY_AND_VALUE
              
            - Key: !Ref EC2TagKey1
              Value: !Ref EC2TagValue1
              Type: KEY_AND_VALUE
          
          AutoRollbackConfiguration:
               Enabled: True
               Events:
                  - DEPLOYMENT_FAILURE
          TriggerConfigurations:
            - TriggerEvents:
                - DeploymentSuccess
                - DeploymentFailure
              TriggerName: MyTarget
              TriggerTargetArn: !Ref SnsTopic
              
    # codepipeline
    
    AppPipeline:
      Type: 'AWS::CodePipeline::Pipeline'
      Properties:
        Name: codecommit-events-pipeline
        RoleArn: !GetAtt 
          - CodePipelineServiceRole
          - Arn
        Stages:
          - Name: Source
            Actions:
              - Name: SourceAction
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Version: 1
                  Provider: CodeCommit
                OutputArtifacts:
                  - Name: SourceOutput
                Configuration:
                  BranchName: !Ref BranchName
                  RepositoryName: !Ref RepoName
                  PollForSourceChanges: false
                RunOrder: 1
          - Name: Build
            Actions:
              - Name: BuildAction
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
                OutputArtifacts:
                  - Name: BuildOutput
                InputArtifacts:
                  - Name: SourceOutput 
                Configuration:
                  ProjectName: !Ref CodeBuildProject
                RunOrder: 1
            
          - Name: Deploy
            Actions:
              - Name: DeployAction
                InputArtifacts:
                  - Name: BuildOutput
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: 1
                  Provider: CodeDeploy
                Configuration:
                  ApplicationName: !Ref CodeDeployApplication
                  DeploymentGroupName: !Ref AppDeploymentGroup
                RunOrder: 1
        ArtifactStore:
          Type: S3
          Location: !Ref S3ArtifactStore
          
    # web hook to trigger my pipeline
    
    AmazonCloudWatchEventRule:
      Type: AWS::Events::Rule
      Properties:
        EventPattern:
          source:
            - aws.codecommit
          detail-type:
            - 'CodeCommit Repository State Change'
          resources:
            - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref RepoName ] ]
          detail:
            event:
              - referenceCreated
              - referenceUpdated
            referenceType:
              - branch
            referenceName:
              - master
        Targets:
          -
            Arn: 
              !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ]
            RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
            Id: codepipeline-AppPipeline
          
    
    # cloudwatch event role
    
    AmazonCloudWatchEventRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Policies:
          -
            PolicyName: cwe-pipeline-execution
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                -
                  Effect: Allow
                  Action: codepipeline:StartPipelineExecution
                  Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ]
     
    EC2Role:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: EC2S3ReadOnlyPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 's3:GetObject'
                  Resource: '*'
                  
    EC2InstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        Path: /
        Roles:
          - !Ref EC2Role
          
    #codebuild role
    CodeBuildServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - codebuild.amazonaws.com
              Action: 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: AWS-codeBuild-Service
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 's3:PutObject'
                    - 's3:GetObject'
                    - 's3:GetObjectVersion'
                    - 's3:GetBucketAcl'
                    - 's3:GetBucketLocation'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'codebuild:*'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'sts:AssumeRole'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'ecr:*'
                    - 'cloudtrail:LookupEvents'
                    - 'iam:CreateServiceLinkedRole'
                  Resource: '*'
    
    #codepipeline role
    CodePipelineServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - codepipeline.amazonaws.com
              Action: 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: AWS-CodePipeline-Service-3
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'codecommit:CancelUploadArchive'
                    - 'codecommit:GetBranch'
                    - 'codecommit:GetCommit'
                    - 'codecommit:GetUploadArchiveStatus'
                    - 'codecommit:UploadArchive'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'codedeploy:CreateDeployment'
                    - 'codedeploy:GetApplicationRevision'
                    - 'codedeploy:GetDeployment'
                    - 'codedeploy:GetDeploymentConfig'
                    - 'codedeploy:RegisterApplicationRevision'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'codebuild:BatchGetBuilds'
                    - 'codebuild:StartBuild'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'devicefarm:ListProjects'
                    - 'devicefarm:ListDevicePools'
                    - 'devicefarm:GetRun'
                    - 'devicefarm:GetUpload'
                    - 'devicefarm:CreateUpload'
                    - 'devicefarm:ScheduleRun'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'lambda:InvokeFunction'
                    - 'lambda:ListFunctions'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'iam:PassRole'
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - 'elasticbeanstalk:*'
                    - 'ec2:*'
                    - 'elasticloadbalancing:*'
                    - 'autoscaling:*'
                    - 'cloudwatch:*'
                    - 's3:*'
                    - 'sns:*'
                    - 'cloudformation:*'
                    - 'rds:*'
                    - 'sqs:*'
                    - 'ecs:*'
                  Resource: '*'
                  
               
Outputs:
      CodecommitRepoHttpUrl:
        Description: The http url of your codecommit repo
        Value: !GetAtt MyRepo.CloneUrlHttp
        Export:
          Name: CodecommitRepoHttpUrl